Installation instructions are also available in the PyLith manual
available on the CIG website

  http://www.geodynamics.org/cig/software/pylith/


======================================================================
OVERVIEW
======================================================================

This installer builds the current PyLith release and its dependencies
from source.

PyLith depends on several other libraries, some of which depend on
other libraries. As a result, building PyLith from source can be
tricky and is fraught with potential pitfalls. This installer attempts
to eliminate these obstacles by providing a utility that builds all of
the dependencies in the proper order with the required options in
addition to PyLith itself.

The installer will download the source code for PyLith and all of the
dependencies during the install process, so you do not need to do this
yourself. Additionally, the installer provides the option of checking
out the PyLith and PETSc source code from the Subversion and Mercurial
repositories (requires subversion and mercurial be installed); only
use this option if you want the bleeding edge versions and are willing
to rebuild frequently.


======================================================================
System Requirements
======================================================================

PyLith Installer should work on any UN*X system.  It requires the
following language tools:

  * A C compiler.
  * Tar archiving utility
  * wget or curl networking downloaders.

If you are using a modern UN*X system, there is a good chance that the
above tools are already installed.


======================================================================
RUNNING THE INSTALLER
======================================================================

The installer has two basic components: a configure script and a
Makefile. The configure script is used to select which dependencies to
install, verify that any dependencies not selected are available, and
create a shell script containing the appropriate environment variables
to build and use PyLith. The Makefile is used to download all of the
source code, build it in the proper order, and install it to the
desired location. The following sections describe the default
configuration and various common perturbations.

As part of the installation process, the installer will, by default,
run some tests to make sure specific dependencies (PETSc and
spatialdata) as well as PyLith were installed properly.

We *STRONGLY* recommend that you run the configure script in a
different directory from the PyLith Installer source code. We
recommend creating a build directory (for example, $HOME/build/pylith)
where you build any software with a subdirectory for PyLith.

These instructions are written assuming that you have downloaded the
installer source code to $HOME/Downloads and want to use the following
directories:

  * $HOME/src/pylith - directory where the installer source code is
    unpacked

  * $HOME/build/pylith - directory where PyLith and its dependencies
    are built

  * $HOME/pylith - directory to which PyLith is installed

If you choose to use different directories, then you will need to
adjust the commands listed in the instructions to account for this
change.

The installer attempts to keep track of packages that it has installed
by creating files with the syntax installed_PACKAGE where PACKAGE is
mpi, netcdf, etc. This permits you to stop the build process at any
time and return at a later time and pick up from where you left
off. You can trigger a package to be rebuilt by removing the
corresponding PACKAGE-build directory and the installed_PACKAGE file
before running make.


----------------------------------------------------------------------
STEP 1 - Download and unpack the installer
----------------------------------------------------------------------

Download the installer.

  http://www.geodynamics.org/cig/software/pylith/pylith-installer-1.0.0.tgz

Untar the source code for the installer:

  mkdir -p $HOME/src/pylith
  cd $HOME/src/pylith
  mv $HOME/Downloads/pylith-installer-1.0.0.tgz
  tar -zxf pylith-installer-1.0.0.tgz


----------------------------------------------------------------------
STEP 2 - Run configure
----------------------------------------------------------------------

On multi-core and multi-processor systems (not clusters but systems
with more than one core and/or processor), the build process can be
sped up by using multiple threads when running "make". Use the
configure argument --with-make-threads=NTHREADS where NTHREADS is the
number of threads to use (1, 2, 4, 8, etc). The default is to use only
one thread. In the examples below, we set the number of threads to 2.

The examples below is not an exhaustive list of configure settings,
rather it is a list of common combinations. You can enable/disable
building each package to select the proper set of dependencies that
need to be built. 

Run configure with --help to see all of the command line arguments.

  $HOME/src/pylith/pylith-installer-1.0.0/configure --help

-------
DEFAULT
-------

  The default installation assumes you have
    * C/C++ compiler
    * Python 2.4 or later
    * MPI

  mkdir -p $HOME/build/pylith
  $HOME/src/pylith/pylith-installer-1.0.0/configure \
    --with-make-threads=2 \
    --prefix=$HOME/pylith

---------------------
DESKTOP-LINUX-MINIMAL
---------------------

  In this case we assume most of the dependencies have been installed
  via a package manager. We do build HDF5 to insure that it is built
  with the MPI used by PETSc and PyLith.

  We assume you have
    * C/C++/Fortran compilers
    * Python 2.4 or later
    * MPI
    * NetCDF 3.6.2 or 4.1.1
    * Proj4
    * Numpy
    * cppunit

  mkdir -p $HOME/build/pylith
  $HOME/src/pylith/pylith-installer-1.0.0/configure \
    --disable-cppunit \
    --disable-numpy \
    --disable-proj4 \
    --disable-netcdf \
    --with-fortran \
    --with-make-threads=2 \
    --prefix=$HOME/pylith

---------------------
DESKTOP-LINUX-OPENMPI
---------------------

  In this case we assume MPI does not exist on your system and you
  want to use the OpenMPI implementation.
  
  We assume you have
    * C/C++/Fortran compilers
    * Python 2.4 or later

  mkdir -p $HOME/build/pylith
  $HOME/src/pylith/pylith-installer-1.0.0/configure \
    --enable-mpi=openmpi \
    --with-fortran \
    --with-make-threads=2 \
    --prefix=$HOME/pylith

--------------
DESKTOP-DARWIN
--------------

  Apple does not include a Fortran compiler with XCode. Although it is
  possible to sometimes install a binary version of the compiler or
  use a Darwin package manager, such as Fink or MacPorts, these have
  their own sets of problems (e.g., incompatibilities, additional
  dependencies, etc). A more robust solution is to build the gfortran
  compiler. We also build openmpi in this case because we want a
  Fortran compiler setup for MPI, and we use curl to download files
  because it is included in OS X but wget is not.
  
  We assume you have
    * C/C++ compilers
    * Python 2.4 or later

  mkdir -p $HOME/build/pylith
  $HOME/src/pylith/pylith-installer-1.0.0/configure \
    --enable-gcc=fortran \
    --enable-mpi=openmpi \
    --with-fortran \
    --with-fetch=curl \
    --with-make-threads=2 \
    --prefix=$HOME/pylith

-------
CLUSTER
-------

  We assume the cluster has been configured with compilers and MPI
  appropriate for the hardware. We assume that Python has not been
  installed or was not built with the selected compiler suite. So we
  assume you have
    * C/C++/Fortran compilers
    * MPI

  mkdir -p $HOME/build/pylith
  $HOME/src/pylith/pylith-installer-1.0.0/configure \
    --enable-python \
    --with-fortran \
    --with-make-threads=2 \
    --prefix=$HOME/pylith

---------
DEVELOPER
---------

  **WARNING** Recommended for expert users only!

  In this case we checkout the PETSc, spatialdata, and PyLith source
  code from the corresponding repositories using the current PyLith
  stable tree. To use another the development trunk, use
  --with-pylith-svn=trunk; to specify another branch or tree use
  --with-pylith-svn=BRANCH where BRANCH is the name of the branch
  (e.g., branches/v1.5-stable) in the SVN repository.

  We assume you have
    * C/C++ compiler
    * Python 2.4 or later
    * MPI

  mkdir -p $HOME/build/pylith
  $HOME/src/pylith/pylith-installer-1.0.0/configure \
    --with-pylith-svn=stable \
    --with-make-threads=2 \
    --prefix=$HOME/pylith


----------------------------------------------------------------------
STEP 3 - Setup your environment
----------------------------------------------------------------------

Setup your environment variables (as indicated in the output of the
configure script).

  source setup.sh


----------------------------------------------------------------------
STEP 4 - Build the software
----------------------------------------------------------------------

Build all of the required dependencies and then PyLith. You do not
need to run "make install", because the installer includes this step
in the make process.

  make

NOTE 

  Depending on the speed and memory of your machine and the number of
  dependencies and which ones need to be built, the build process can
  take anywhere from about ten minutes to several hours. As discussed
  above you can interrupt the build process and continue at a later
  time from where you left off.

  If you get error messages while running make with multiple threads,
  then try running make again as not all packages fully support
  parallel builds. You can also go to the build directory of tha
  package and run "make" before running make in $HOME/build/pylith
  again to resume the build process. For example,

    cd netcdf-build
    make


----------------------------------------------------------------------
STEP 5 - Verify the installation
----------------------------------------------------------------------

Run your favorite PyLith example or test problem to insure that PyLith
was installed properly.

Add the line

  . $HOME/build/pylith/setup.sh

to your .bashrc (or other appropriate file) or manually add the
environment variables from setup.sh to your .bashrc (or other
appropriate file) so that the environment is setup properly
automatically every time you open a shell.
